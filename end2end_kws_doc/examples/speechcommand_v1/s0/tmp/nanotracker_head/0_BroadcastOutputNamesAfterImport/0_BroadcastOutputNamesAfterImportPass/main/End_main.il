%main = fn(%input: f32[1,30,40], %cache: f32[1,256,105]): // (f32[1,30,40], f32[1,256,105]) -> (f32[?,?,?], f32[?,?,?])
{
  %0 = Slice(%cache, const(i64[1] : {49L}), const(i64[1] : {105L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[1,256,56]
  %1 = Slice(%cache, const(i64[1] : {21L}), const(i64[1] : {49L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[1,256,28]
  %2 = Slice(%cache, const(i64[1] : {7L}), const(i64[1] : {21L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[1,256,14]
  %3 = Slice(%cache, const(i64[1] : {0L}), const(i64[1] : {7L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[1,256,7]
  %4 = MatMul(%input, const(f32[40,256])): // f32[1,30,256]
  %5 = Add(BinaryOp.Add, const(f32[256]), %4): // f32[1,30,256]
  %6 = Relu(%5): // f32[1,30,256]
  %7 = Transpose(%6, const(i64[3] : {0L,2L,1L})): // f32[1,256,30]
  %8 = (%3, %7): // (f32[1,256,7], f32[1,256,30])
  
  %9 = Concat(%8, const(i64 : 2)): // f32[1,256,37]
  %10 = Unsqueeze(%9, const(i32[1] : {3})): // f32[1,256,37,1]
  %11 = Unsqueeze(const(f32[256,1,8]), const(i32[1] : {3})): // f32[256,1,8,1]
  %12 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %13 = Transpose(%12, const(i32[2] : {1,0})): // i64[2,2]
  %14 = Conv2D(PadMode.Constant, %10, %11, const(f32[256]), const(i64[2] : {1L,1L}), %13, const(i64[2] : {1L,1L}), const(i64 : 256), const(f32[2] : {-Infinityf,Infinityf})): // f32[1,256,?,?]
  %15 = Squeeze(%14, const(i32[1] : {3})): // f32[1,256,?]
  %16 = Relu(%15): // f32[1,256,?]
  %17 = Unsqueeze(%16, const(i32[1] : {3})): // f32[1,256,?,1]
  %18 = Unsqueeze(const(f32[256,256,1]), const(i32[1] : {3})): // f32[256,256,1,1]
  %19 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %20 = Transpose(%19, const(i32[2] : {1,0})): // i64[2,2]
  %21 = Conv2D(PadMode.Constant, %17, %18, const(f32[256]), const(i64[2] : {1L,1L}), %20, const(i64[2] : {1L,1L}), const(i64 : 1), const(f32[2] : {-Infinityf,Infinityf})): // f32[1,256,?,?]
  %22 = Squeeze(%21, const(i32[1] : {3})): // f32[1,256,?]
  %23 = Relu(%22): // f32[1,256,?]
  %24 = Add(BinaryOp.Add, %23, %7): // f32[?,?,?]
  %25 = (%2, %24): // (f32[1,256,14], f32[?,?,?])
  
  %26 = Concat(%25, const(i64 : 2)): // f32[?,?,?]
  %27 = Unsqueeze(%26, const(i32[1] : {3})): // f32[?,?,?,1]
  %28 = Unsqueeze(const(f32[256,1,8]), const(i32[1] : {3})): // f32[256,1,8,1]
  %29 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %30 = Transpose(%29, const(i32[2] : {1,0})): // i64[2,2]
  %31 = Conv2D(PadMode.Constant, %27, %28, const(f32[256]), const(i64[2] : {1L,1L}), %30, const(i64[2] : {2L,1L}), const(i64 : 256), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %32 = Squeeze(%31, const(i32[1] : {3})): // f32[?,256,?]
  %33 = Relu(%32): // f32[?,256,?]
  %34 = Unsqueeze(%33, const(i32[1] : {3})): // f32[?,256,?,1]
  %35 = Unsqueeze(const(f32[256,256,1]), const(i32[1] : {3})): // f32[256,256,1,1]
  %36 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %37 = Transpose(%36, const(i32[2] : {1,0})): // i64[2,2]
  %38 = Conv2D(PadMode.Constant, %34, %35, const(f32[256]), const(i64[2] : {1L,1L}), %37, const(i64[2] : {1L,1L}), const(i64 : 1), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %39 = Squeeze(%38, const(i32[1] : {3})): // f32[?,256,?]
  %40 = Relu(%39): // f32[?,256,?]
  %41 = Add(BinaryOp.Add, %40, %24): // f32[?,?,?]
  %42 = (%1, %41): // (f32[1,256,28], f32[?,?,?])
  
  %43 = Concat(%42, const(i64 : 2)): // f32[?,?,?]
  %44 = Unsqueeze(%43, const(i32[1] : {3})): // f32[?,?,?,1]
  %45 = Unsqueeze(const(f32[256,1,8]), const(i32[1] : {3})): // f32[256,1,8,1]
  %46 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %47 = Transpose(%46, const(i32[2] : {1,0})): // i64[2,2]
  %48 = Conv2D(PadMode.Constant, %44, %45, const(f32[256]), const(i64[2] : {1L,1L}), %47, const(i64[2] : {4L,1L}), const(i64 : 256), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %49 = Squeeze(%48, const(i32[1] : {3})): // f32[?,256,?]
  %50 = Relu(%49): // f32[?,256,?]
  %51 = Unsqueeze(%50, const(i32[1] : {3})): // f32[?,256,?,1]
  %52 = Unsqueeze(const(f32[256,256,1]), const(i32[1] : {3})): // f32[256,256,1,1]
  %53 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %54 = Transpose(%53, const(i32[2] : {1,0})): // i64[2,2]
  %55 = Conv2D(PadMode.Constant, %51, %52, const(f32[256]), const(i64[2] : {1L,1L}), %54, const(i64[2] : {1L,1L}), const(i64 : 1), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %56 = Squeeze(%55, const(i32[1] : {3})): // f32[?,256,?]
  %57 = Relu(%56): // f32[?,256,?]
  %58 = Add(BinaryOp.Add, %57, %41): // f32[?,?,?]
  %59 = (%0, %58): // (f32[1,256,56], f32[?,?,?])
  
  %60 = Concat(%59, const(i64 : 2)): // f32[?,?,?]
  %61 = Unsqueeze(%60, const(i32[1] : {3})): // f32[?,?,?,1]
  %62 = Unsqueeze(const(f32[256,1,8]), const(i32[1] : {3})): // f32[256,1,8,1]
  %63 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %64 = Transpose(%63, const(i32[2] : {1,0})): // i64[2,2]
  %65 = Conv2D(PadMode.Constant, %61, %62, const(f32[256]), const(i64[2] : {1L,1L}), %64, const(i64[2] : {8L,1L}), const(i64 : 256), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %66 = Squeeze(%65, const(i32[1] : {3})): // f32[?,256,?]
  %67 = Relu(%66): // f32[?,256,?]
  %68 = Unsqueeze(%67, const(i32[1] : {3})): // f32[?,256,?,1]
  %69 = Unsqueeze(const(f32[256,256,1]), const(i32[1] : {3})): // f32[256,256,1,1]
  %70 = Reshape(const(i64[4] : {0L,0L,0L,0L}), const(i32[2] : {2,-1})): // i64[2,2]
  %71 = Transpose(%70, const(i32[2] : {1,0})): // i64[2,2]
  %72 = Conv2D(PadMode.Constant, %68, %69, const(f32[256]), const(i64[2] : {1L,1L}), %71, const(i64[2] : {1L,1L}), const(i64 : 1), const(f32[2] : {-Infinityf,Infinityf})): // f32[?,256,?,?]
  %73 = Squeeze(%72, const(i32[1] : {3})): // f32[?,256,?]
  %74 = Relu(%73): // f32[?,256,?]
  %75 = Add(BinaryOp.Add, %74, %58): // f32[?,?,?]
  %76 = Transpose(%75, const(i64[3] : {0L,2L,1L})): // f32[?,?,?]
  %77 = MatMul(%76, const(f32[256,2])): // f32[?,?,2]
  %78 = Add(BinaryOp.Add, const(f32[2] : {-0.046259888f,-0.14146039f}), %77): // f32[?,?,?]
  %79 = Sigmoid(%78): // f32[?,?,?]
  %80 = Slice(%9, const(i64[1] : {-7L}), const(i64[1] : {9223372036854775807L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[1,256,7]
  %81 = Slice(%26, const(i64[1] : {-14L}), const(i64[1] : {9223372036854775807L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[?,?,?]
  %82 = Slice(%43, const(i64[1] : {-28L}), const(i64[1] : {9223372036854775807L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[?,?,?]
  %83 = Slice(%60, const(i64[1] : {-56L}), const(i64[1] : {9223372036854775807L}), const(i64[1] : {2L}), const(i64[1] : {1L})): // f32[?,?,?]
  %84 = (%80, %81, %82, %83): // (f32[1,256,7], f32[?,?,?], f32[?,?,?], f32[?,?,?])
  
  %85 = Concat(%84, const(i64 : 2)): // f32[?,?,?]
  %86 = (%79, %85): // (f32[?,?,?], f32[?,?,?])
  
}
